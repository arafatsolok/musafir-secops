import React, { useState, useEffect } from 'react'
import { 
  Shield, 
  AlertTriangle, 
  Bug, 
  Search, 
  Filter, 
  Download, 
  RefreshCw,
  CheckCircle,
  XCircle,
  Clock,
  TrendingUp,
  TrendingDown,
  Activity,
  BarChart3,
  PieChart,
  Calendar,
  Eye,
  Settings,
  Play,
  Pause,
  RotateCcw,
  FileText,
  Database,
  Server,
  Globe,
  Smartphone,
  Monitor,
  Wifi,
  Lock,
  Unlock,
  Zap,
  Target,
  Users,
  Building,
  MapPin,
  ExternalLink,
  Info,
  AlertCircle,
  CheckSquare,
  Square,
  ArrowRight,
  ArrowUp,
  ArrowDown
} from 'lucide-react'
import { vulnerabilityService, assetService } from '../services'

interface Vulnerability {
  id: string
  cve_id: string
  title: string
  description: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  cvss_score: number
  category: 'network' | 'application' | 'system' | 'database' | 'web'
  affected_assets: number
  discovered_date: string
  last_seen: string
  status: 'open' | 'in_progress' | 'resolved' | 'accepted_risk' | 'false_positive'
  remediation_effort: 'low' | 'medium' | 'high'
  exploit_available: boolean
  patch_available: boolean
  vendor: string
  product: string
  version: string
  assigned_to: string
  due_date: string
  tags: string[]
}

interface ScanResult {
  id: string
  scan_name: string
  target: string
  scan_type: 'network' | 'web_app' | 'database' | 'infrastructure'
  status: 'running' | 'completed' | 'failed' | 'scheduled'
  start_time: string
  end_time?: string
  duration?: string
  vulnerabilities_found: number
  critical_count: number
  high_count: number
  medium_count: number
  low_count: number
  progress: number
}

interface Asset {
  id: string
  name: string
  ip_address: string
  type: 'server' | 'workstation' | 'network_device' | 'database' | 'web_app'
  os: string
  criticality: 'critical' | 'high' | 'medium' | 'low'
  vulnerabilities: number
  last_scanned: string
  scan_status: 'up_to_date' | 'outdated' | 'never_scanned'
  owner: string
  location: string
}

interface RemediationTask {
  id: string
  vulnerability_id: string
  title: string
  description: string
  priority: 'critical' | 'high' | 'medium' | 'low'
  status: 'pending' | 'in_progress' | 'completed' | 'blocked'
  assigned_to: string
  created_date: string
  due_date: string
  estimated_effort: string
  progress: number
  dependencies: string[]
}

const VulnerabilityManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'dashboard' | 'vulnerabilities' | 'scans' | 'assets' | 'remediation'>('dashboard')
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedSeverity, setSelectedSeverity] = useState<string>('all')
  const [selectedStatus, setSelectedStatus] = useState<string>('all')
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [timeRange, setTimeRange] = useState<string>('30d')
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    loadVulnerabilities()
  }, [])

  const loadVulnerabilities = async () => {
    try {
      setLoading(true)
      const response = await vulnerabilityService.getVulnerabilities()
      
      if (response.success && response.data) {
        // Convert API data to component format
        const vulnData: Vulnerability[] = response.data.map(vuln => ({
          id: vuln.id,
          cve_id: vuln.cveId || `CVE-${vuln.id}`,
          title: vuln.title,
          description: vuln.description,
          severity: vuln.severity,
          cvss_score: vuln.cvssScore || 0,
          category: vuln.category || 'system',
          affected_assets: vuln.affectedAssets || 1,
          discovered_date: vuln.discoveredAt,
          last_seen: vuln.lastSeen || vuln.discoveredAt,
          status: vuln.status,
          remediation_effort: vuln.remediationEffort || 'medium',
          exploit_available: vuln.exploitAvailable || false,
          patch_available: vuln.patchAvailable || false,
          vendor: vuln.vendor || 'Unknown',
          product: vuln.product || 'Unknown',
          version: vuln.version || 'Unknown',
          assigned_to: vuln.assignedTo || 'Security Team',
          due_date: vuln.dueDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          tags: vuln.tags || []
        }))
        setVulnerabilities(vulnData)
      } else {
        // Fallback to demo data
        setVulnerabilities([
          {
            id: '1',
            cve_id: 'CVE-2024-0001',
            title: 'Remote Code Execution in Apache HTTP Server',
            description: 'A critical vulnerability allows remote attackers to execute arbitrary code through malformed HTTP requests.',
            severity: 'critical',
            cvss_score: 9.8,
            category: 'web',
            affected_assets: 15,
            discovered_date: '2024-01-10',
            last_seen: '2024-01-15',
            status: 'open',
            remediation_effort: 'medium',
            exploit_available: true,
            patch_available: true,
            vendor: 'Apache',
            product: 'HTTP Server',
            version: '2.4.41',
            assigned_to: 'Security Team',
            due_date: '2024-01-20',
            tags: ['web-server', 'rce', 'public-exploit']
          },
          {
            id: '2',
            cve_id: 'CVE-2024-0002',
            title: 'SQL Injection in Customer Portal',
            description: 'SQL injection vulnerability in the customer login form allows unauthorized database access.',
            severity: 'high',
            cvss_score: 8.1,
            category: 'application',
            affected_assets: 3,
            discovered_date: '2024-01-12',
            last_seen: '2024-01-15',
            status: 'in_progress',
            remediation_effort: 'low',
            exploit_available: false,
            patch_available: false,
            vendor: 'Internal',
            product: 'Customer Portal',
            version: '1.2.3',
            assigned_to: 'Dev Team',
            due_date: '2024-01-18',
            tags: ['sql-injection', 'web-app', 'customer-data']
          }
        ])
      }
    } catch (err) {
      setError('Failed to load vulnerabilities')
      console.error('Error loading vulnerabilities:', err)
    } finally {
      setLoading(false);
    }
  };

  const [scanResults, setScanResults] = useState<ScanResult[]>([
    {
      id: '1',
      scan_name: 'Weekly Network Scan',
      target: '192.168.1.0/24',
      scan_type: 'network',
      status: 'completed',
      start_time: '2024-01-15 09:00:00',
      end_time: '2024-01-15 11:30:00',
      duration: '2h 30m',
      vulnerabilities_found: 45,
      critical_count: 2,
      high_count: 8,
      medium_count: 20,
      low_count: 15,
      progress: 100
    },
    {
      id: '2',
      scan_name: 'Web Application Security Test',
      target: 'https://portal.company.com',
      scan_type: 'web_app',
      status: 'running',
      start_time: '2024-01-15 14:00:00',
      vulnerabilities_found: 12,
      critical_count: 0,
      high_count: 2,
      medium_count: 6,
      low_count: 4,
      progress: 75
    },
    {
      id: '3',
      scan_name: 'Database Security Assessment',
      target: 'db-prod-01.company.com',
      scan_type: 'database',
      status: 'scheduled',
      start_time: '2024-01-16 02:00:00',
      vulnerabilities_found: 0,
      critical_count: 0,
      high_count: 0,
      medium_count: 0,
      low_count: 0,
      progress: 0
    }
  ])

  const [assets, setAssets] = useState<Asset[]>([
    {
      id: '1',
      name: 'web-server-01',
      ip_address: '192.168.1.10',
      type: 'server',
      os: 'Ubuntu 20.04',
      criticality: 'critical',
      vulnerabilities: 8,
      last_scanned: '2024-01-15',
      scan_status: 'up_to_date',
      owner: 'IT Team',
      location: 'Data Center A'
    },
    {
      id: '2',
      name: 'db-prod-01',
      ip_address: '192.168.1.20',
      type: 'database',
      os: 'CentOS 8',
      criticality: 'critical',
      vulnerabilities: 3,
      last_scanned: '2024-01-10',
      scan_status: 'outdated',
      owner: 'Database Team',
      location: 'Data Center A'
    },
    {
      id: '3',
      name: 'workstation-finance-01',
      ip_address: '192.168.2.50',
      type: 'workstation',
      os: 'Windows 11',
      criticality: 'medium',
      vulnerabilities: 12,
      last_scanned: '2024-01-14',
      scan_status: 'up_to_date',
      owner: 'Finance Dept',
      location: 'Office Floor 2'
    }
  ])

  const [remediationTasks, setRemediationTasks] = useState<RemediationTask[]>([
    {
      id: '1',
      vulnerability_id: '1',
      title: 'Patch Apache HTTP Server to version 2.4.58',
      description: 'Update all Apache HTTP Server instances to the latest version to address CVE-2024-0001',
      priority: 'critical',
      status: 'in_progress',
      assigned_to: 'John Smith',
      created_date: '2024-01-10',
      due_date: '2024-01-20',
      estimated_effort: '8 hours',
      progress: 60,
      dependencies: ['maintenance-window', 'backup-completion']
    },
    {
      id: '2',
      vulnerability_id: '2',
      title: 'Fix SQL Injection in Customer Portal',
      description: 'Implement parameterized queries and input validation in the customer login form',
      priority: 'high',
      status: 'in_progress',
      assigned_to: 'Dev Team',
      created_date: '2024-01-12',
      due_date: '2024-01-18',
      estimated_effort: '4 hours',
      progress: 80,
      dependencies: ['code-review', 'testing']
    },
    {
      id: '3',
      vulnerability_id: '4',
      title: 'Implement XSS Protection in Admin Panel',
      description: 'Add input sanitization and output encoding to prevent XSS attacks',
      priority: 'medium',
      status: 'pending',
      assigned_to: 'Security Team',
      created_date: '2024-01-14',
      due_date: '2024-01-25',
      estimated_effort: '6 hours',
      progress: 0,
      dependencies: ['security-review']
    }
  ])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-700 bg-red-100 border-red-200'
      case 'high':
        return 'text-orange-700 bg-orange-100 border-orange-200'
      case 'medium':
        return 'text-yellow-700 bg-yellow-100 border-yellow-200'
      case 'low':
        return 'text-green-700 bg-green-100 border-green-200'
      default:
        return 'text-gray-700 bg-gray-100 border-gray-200'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open':
      case 'pending':
        return 'text-red-700 bg-red-100'
      case 'in_progress':
      case 'running':
        return 'text-yellow-700 bg-yellow-100'
      case 'resolved':
      case 'completed':
        return 'text-green-700 bg-green-100'
      case 'accepted_risk':
        return 'text-blue-700 bg-blue-100'
      case 'false_positive':
        return 'text-gray-700 bg-gray-100'
      case 'failed':
        return 'text-red-700 bg-red-100'
      case 'scheduled':
        return 'text-blue-700 bg-blue-100'
      case 'blocked':
        return 'text-purple-700 bg-purple-100'
      default:
        return 'text-gray-700 bg-gray-100'
    }
  }

  const getCriticalityColor = (criticality: string) => {
    switch (criticality) {
      case 'critical':
        return 'text-red-700 bg-red-100'
      case 'high':
        return 'text-orange-700 bg-orange-100'
      case 'medium':
        return 'text-yellow-700 bg-yellow-100'
      case 'low':
        return 'text-green-700 bg-green-100'
      default:
        return 'text-gray-700 bg-gray-100'
    }
  }

  const getScanStatusColor = (status: string) => {
    switch (status) {
      case 'up_to_date':
        return 'text-green-700 bg-green-100'
      case 'outdated':
        return 'text-orange-700 bg-orange-100'
      case 'never_scanned':
        return 'text-red-700 bg-red-100'
      default:
        return 'text-gray-700 bg-gray-100'
    }
  }

  const getAssetIcon = (type: string) => {
    switch (type) {
      case 'server':
        return <Server className="h-5 w-5 text-blue-600" />
      case 'workstation':
        return <Monitor className="h-5 w-5 text-green-600" />
      case 'network_device':
        return <Wifi className="h-5 w-5 text-purple-600" />
      case 'database':
        return <Database className="h-5 w-5 text-orange-600" />
      case 'web_app':
        return <Globe className="h-5 w-5 text-red-600" />
      default:
        return <Server className="h-5 w-5 text-gray-600" />
    }
  }

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.cve_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesSeverity = selectedSeverity === 'all' || vuln.severity === selectedSeverity
    const matchesStatus = selectedStatus === 'all' || vuln.status === selectedStatus
    const matchesCategory = selectedCategory === 'all' || vuln.category === selectedCategory
    return matchesSearch && matchesSeverity && matchesStatus && matchesCategory
  })

  const totalVulnerabilities = vulnerabilities.length
  const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical').length
  const highVulns = vulnerabilities.filter(v => v.severity === 'high').length
  const openVulns = vulnerabilities.filter(v => v.status === 'open').length
  const totalAssets = assets.length
  const criticalAssets = assets.filter(a => a.criticality === 'critical').length

  if (loading) {
    return (
      <div className="p-6 bg-gray-50 min-h-full">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <Shield className="h-8 w-8 text-blue-600 animate-spin mx-auto mb-4" />
            <p className="text-gray-600">Loading vulnerability data...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="p-6 bg-gray-50 min-h-full">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <AlertTriangle className="h-8 w-8 text-red-600 mx-auto mb-4" />
            <p className="text-red-600 mb-2">Error loading vulnerability data</p>
            <p className="text-gray-600 text-sm">{error}</p>
            <button 
              onClick={loadVulnerabilities}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 bg-gray-50 min-h-full">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Vulnerability Management</h1>
            <p className="text-gray-600">Identify, assess, and remediate security vulnerabilities</p>
          </div>
          <div className="flex space-x-3">
            <select
              value={timeRange}
              onChange={(e) => setTimeRange(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="7d">Last 7 Days</option>
              <option value="30d">Last 30 Days</option>
              <option value="90d">Last 90 Days</option>
              <option value="1y">Last Year</option>
            </select>
            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
              <Play className="h-4 w-4" />
              <span>New Scan</span>
            </button>
            <button className="flex items-center space-x-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">
              <RefreshCw className="h-4 w-4" />
              <span>Refresh</span>
            </button>
            <button className="flex items-center space-x-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">
              <Download className="h-4 w-4" />
              <span>Export</span>
            </button>
          </div>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Bug className="h-8 w-8 text-blue-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Total Vulnerabilities</p>
              <p className="text-2xl font-semibold text-gray-900">{totalVulnerabilities}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <AlertTriangle className="h-8 w-8 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Critical</p>
              <p className="text-2xl font-semibold text-gray-900">{criticalVulns}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <AlertCircle className="h-8 w-8 text-orange-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">High</p>
              <p className="text-2xl font-semibold text-gray-900">{highVulns}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <XCircle className="h-8 w-8 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Open</p>
              <p className="text-2xl font-semibold text-gray-900">{openVulns}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Server className="h-8 w-8 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Assets</p>
              <p className="text-2xl font-semibold text-gray-900">{totalAssets}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Shield className="h-8 w-8 text-purple-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">Critical Assets</p>
              <p className="text-2xl font-semibold text-gray-900">{criticalAssets}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="mb-6">
        <nav className="flex space-x-8">
          {[
            { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
            { id: 'vulnerabilities', label: 'Vulnerabilities', icon: Bug },
            { id: 'scans', label: 'Scans', icon: Search },
            { id: 'assets', label: 'Assets', icon: Server },
            { id: 'remediation', label: 'Remediation', icon: CheckCircle }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <tab.icon className="h-5 w-5" />
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Dashboard Tab */}
      {activeTab === 'dashboard' && (
        <div className="space-y-6">
          {/* Risk Overview */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Vulnerability Trends</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">New Vulnerabilities (7d)</span>
                  <span className="text-sm font-medium text-red-600">↑ 12</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Resolved (7d)</span>
                  <span className="text-sm font-medium text-green-600">↑ 8</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Mean Time to Remediate</span>
                  <span className="text-sm font-medium text-gray-900">5.2 days</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">SLA Compliance</span>
                  <span className="text-sm font-medium text-green-600">87%</span>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Risk Distribution</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                    <span className="text-sm text-gray-600">Critical</span>
                  </div>
                  <span className="text-sm font-medium text-gray-900">{criticalVulns} ({Math.round((criticalVulns / totalVulnerabilities) * 100)}%)</span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                    <span className="text-sm text-gray-600">High</span>
                  </div>
                  <span className="text-sm font-medium text-gray-900">{highVulns} ({Math.round((highVulns / totalVulnerabilities) * 100)}%)</span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                    <span className="text-sm text-gray-600">Medium</span>
                  </div>
                  <span className="text-sm font-medium text-gray-900">{vulnerabilities.filter(v => v.severity === 'medium').length} ({Math.round((vulnerabilities.filter(v => v.severity === 'medium').length / totalVulnerabilities) * 100)}%)</span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm text-gray-600">Low</span>
                  </div>
                  <span className="text-sm font-medium text-gray-900">{vulnerabilities.filter(v => v.severity === 'low').length} ({Math.round((vulnerabilities.filter(v => v.severity === 'low').length / totalVulnerabilities) * 100)}%)</span>
                </div>
              </div>
            </div>
          </div>

          {/* Recent Scans */}
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Recent Scans</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {scanResults.slice(0, 3).map((scan) => (
                <div key={scan.id} className="p-6">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <h4 className="font-medium text-gray-900">{scan.scan_name}</h4>
                      <p className="text-sm text-gray-600">{scan.target}</p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(scan.status)}`}>
                        {scan.status.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                  
                  {scan.status === 'running' && (
                    <div className="mb-3">
                      <div className="flex items-center justify-between text-sm text-gray-600 mb-1">
                        <span>Progress</span>
                        <span>{scan.progress}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${scan.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  )}
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-6 text-sm text-gray-600">
                      <span>Started: {new Date(scan.start_time).toLocaleString()}</span>
                      {scan.duration && <span>Duration: {scan.duration}</span>}
                    </div>
                    <div className="flex items-center space-x-4 text-sm">
                      <span className="text-red-600">Critical: {scan.critical_count}</span>
                      <span className="text-orange-600">High: {scan.high_count}</span>
                      <span className="text-yellow-600">Medium: {scan.medium_count}</span>
                      <span className="text-green-600">Low: {scan.low_count}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Top Vulnerabilities */}
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Critical Vulnerabilities</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {vulnerabilities.filter(v => v.severity === 'critical' || v.severity === 'high').slice(0, 5).map((vuln) => (
                <div key={vuln.id} className="p-6">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <h4 className="font-medium text-gray-900">{vuln.title}</h4>
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getSeverityColor(vuln.severity)}`}>
                          {vuln.severity.toUpperCase()}
                        </span>
                        <span className="text-xs text-gray-500">CVSS: {vuln.cvss_score}</span>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
                      <div className="flex items-center space-x-4 text-xs text-gray-500">
                        <span>CVE: {vuln.cve_id}</span>
                        <span>Assets: {vuln.affected_assets}</span>
                        <span>Discovered: {new Date(vuln.discovered_date).toLocaleDateString()}</span>
                        {vuln.exploit_available && (
                          <span className="text-red-600 font-medium">Exploit Available</span>
                        )}
                        {vuln.patch_available && (
                          <span className="text-green-600 font-medium">Patch Available</span>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(vuln.status)}`}>
                        {vuln.status.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Vulnerabilities Tab */}
      {activeTab === 'vulnerabilities' && (
        <div className="space-y-6">
          {/* Filters */}
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search vulnerabilities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <select
                value={selectedSeverity}
                onChange={(e) => setSelectedSeverity(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">All Statuses</option>
                <option value="open">Open</option>
                <option value="in_progress">In Progress</option>
                <option value="resolved">Resolved</option>
                <option value="accepted_risk">Accepted Risk</option>
                <option value="false_positive">False Positive</option>
              </select>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">All Categories</option>
                <option value="network">Network</option>
                <option value="application">Application</option>
                <option value="system">System</option>
                <option value="database">Database</option>
                <option value="web">Web</option>
              </select>
            </div>
          </div>

          {/* Vulnerabilities List */}
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Vulnerabilities ({filteredVulnerabilities.length})</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {filteredVulnerabilities.map((vuln) => (
                <div key={vuln.id} className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h4 className="font-medium text-gray-900">{vuln.title}</h4>
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getSeverityColor(vuln.severity)}`}>
                          {vuln.severity.toUpperCase()}
                        </span>
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-700">
                          CVSS: {vuln.cvss_score}
                        </span>
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-700">
                          {vuln.category.toUpperCase()}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mb-3">{vuln.description}</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-6 gap-4 mb-3">
                        <div>
                          <span className="text-xs font-medium text-gray-500">CVE ID</span>
                          <p className="text-sm text-gray-900">{vuln.cve_id}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Affected Assets</span>
                          <p className="text-sm text-gray-900">{vuln.affected_assets}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Vendor/Product</span>
                          <p className="text-sm text-gray-900">{vuln.vendor} {vuln.product}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Version</span>
                          <p className="text-sm text-gray-900">{vuln.version}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Assigned To</span>
                          <p className="text-sm text-gray-900">{vuln.assigned_to}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Due Date</span>
                          <p className="text-sm text-gray-900">{new Date(vuln.due_date).toLocaleDateString()}</p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-4 text-xs">
                        {vuln.exploit_available && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-red-700 bg-red-100">
                            <AlertTriangle className="h-3 w-3 mr-1" />
                            Exploit Available
                          </span>
                        )}
                        {vuln.patch_available && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-green-700 bg-green-100">
                            <CheckCircle className="h-3 w-3 mr-1" />
                            Patch Available
                          </span>
                        )}
                        <span className="text-gray-500">
                          Remediation Effort: {vuln.remediation_effort.toUpperCase()}
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(vuln.status)}`}>
                        {vuln.status.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex flex-wrap gap-1">
                      {vuln.tags.map((tag, index) => (
                        <span key={index} className="inline-flex px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-600">
                          {tag}
                        </span>
                      ))}
                    </div>
                    <div className="flex space-x-2">
                      <button className="text-blue-600 hover:text-blue-800 text-sm">
                        <Eye className="h-4 w-4" />
                      </button>
                      <button className="text-green-600 hover:text-green-800 text-sm">
                        <CheckCircle className="h-4 w-4" />
                      </button>
                      <button className="text-gray-600 hover:text-gray-800 text-sm">
                        <Settings className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Scans Tab */}
      {activeTab === 'scans' && (
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Scan Results</h3>
              <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                <Play className="h-4 w-4" />
                <span>New Scan</span>
              </button>
            </div>
            <div className="divide-y divide-gray-200">
              {scanResults.map((scan) => (
                <div key={scan.id} className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h4 className="font-medium text-gray-900">{scan.scan_name}</h4>
                      <p className="text-sm text-gray-600">{scan.target} • {scan.scan_type.replace('_', ' ').toUpperCase()}</p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(scan.status)}`}>
                        {scan.status.replace('_', ' ').toUpperCase()}
                      </span>
                      {scan.status === 'running' && (
                        <button className="text-red-600 hover:text-red-800">
                          <Pause className="h-4 w-4" />
                        </button>
                      )}
                    </div>
                  </div>
                  
                  {scan.status === 'running' && (
                    <div className="mb-4">
                      <div className="flex items-center justify-between text-sm text-gray-600 mb-1">
                        <span>Progress</span>
                        <span>{scan.progress}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${scan.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-6 gap-4 mb-4">
                    <div>
                      <span className="text-xs font-medium text-gray-500">Start Time</span>
                      <p className="text-sm text-gray-900">{new Date(scan.start_time).toLocaleString()}</p>
                    </div>
                    {scan.end_time && (
                      <div>
                        <span className="text-xs font-medium text-gray-500">End Time</span>
                        <p className="text-sm text-gray-900">{new Date(scan.end_time).toLocaleString()}</p>
                      </div>
                    )}
                    {scan.duration && (
                      <div>
                        <span className="text-xs font-medium text-gray-500">Duration</span>
                        <p className="text-sm text-gray-900">{scan.duration}</p>
                      </div>
                    )}
                    <div>
                      <span className="text-xs font-medium text-gray-500">Total Found</span>
                      <p className="text-sm text-gray-900">{scan.vulnerabilities_found}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-6 text-sm">
                      <span className="text-red-600">Critical: {scan.critical_count}</span>
                      <span className="text-orange-600">High: {scan.high_count}</span>
                      <span className="text-yellow-600">Medium: {scan.medium_count}</span>
                      <span className="text-green-600">Low: {scan.low_count}</span>
                    </div>
                    <div className="flex space-x-2">
                      <button className="text-blue-600 hover:text-blue-800">
                        <Eye className="h-4 w-4" />
                      </button>
                      <button className="text-green-600 hover:text-green-800">
                        <Download className="h-4 w-4" />
                      </button>
                      <button className="text-gray-600 hover:text-gray-800">
                        <RotateCcw className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Assets Tab */}
      {activeTab === 'assets' && (
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Assets ({assets.length})</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {assets.map((asset) => (
                <div key={asset.id} className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      {getAssetIcon(asset.type)}
                      <div>
                        <h4 className="font-medium text-gray-900">{asset.name}</h4>
                        <p className="text-sm text-gray-600">{asset.ip_address} • {asset.os}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getCriticalityColor(asset.criticality)}`}>
                        {asset.criticality.toUpperCase()}
                      </span>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getScanStatusColor(asset.scan_status)}`}>
                        {asset.scan_status.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-4">
                    <div>
                      <span className="text-xs font-medium text-gray-500">Type</span>
                      <p className="text-sm text-gray-900">{asset.type.replace('_', ' ').toUpperCase()}</p>
                    </div>
                    <div>
                      <span className="text-xs font-medium text-gray-500">Owner</span>
                      <p className="text-sm text-gray-900">{asset.owner}</p>
                    </div>
                    <div>
                      <span className="text-xs font-medium text-gray-500">Location</span>
                      <p className="text-sm text-gray-900">{asset.location}</p>
                    </div>
                    <div>
                      <span className="text-xs font-medium text-gray-500">Vulnerabilities</span>
                      <p className="text-sm text-gray-900">{asset.vulnerabilities}</p>
                    </div>
                    <div>
                      <span className="text-xs font-medium text-gray-500">Last Scanned</span>
                      <p className="text-sm text-gray-900">{new Date(asset.last_scanned).toLocaleDateString()}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="text-sm text-gray-600">
                      {asset.vulnerabilities > 0 && (
                        <span className="text-red-600">
                          {asset.vulnerabilities} vulnerabilities found
                        </span>
                      )}
                      {asset.vulnerabilities === 0 && (
                        <span className="text-green-600">
                          No vulnerabilities found
                        </span>
                      )}
                    </div>
                    <div className="flex space-x-2">
                      <button className="text-blue-600 hover:text-blue-800">
                        <Eye className="h-4 w-4" />
                      </button>
                      <button className="text-green-600 hover:text-green-800">
                        <Search className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Remediation Tab */}
      {activeTab === 'remediation' && (
        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Remediation Tasks ({remediationTasks.length})</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {remediationTasks.map((task) => (
                <div key={task.id} className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <h4 className="font-medium text-gray-900">{task.title}</h4>
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getSeverityColor(task.priority)}`}>
                          {task.priority.toUpperCase()}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mb-3">{task.description}</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-3">
                        <div>
                          <span className="text-xs font-medium text-gray-500">Assigned To</span>
                          <p className="text-sm text-gray-900">{task.assigned_to}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Created</span>
                          <p className="text-sm text-gray-900">{new Date(task.created_date).toLocaleDateString()}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Due Date</span>
                          <p className="text-sm text-gray-900">{new Date(task.due_date).toLocaleDateString()}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Estimated Effort</span>
                          <p className="text-sm text-gray-900">{task.estimated_effort}</p>
                        </div>
                        <div>
                          <span className="text-xs font-medium text-gray-500">Progress</span>
                          <p className="text-sm text-gray-900">{task.progress}%</p>
                        </div>
                      </div>
                      
                      {task.progress > 0 && (
                        <div className="mb-3">
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${task.progress}%` }}
                            ></div>
                          </div>
                        </div>
                      )}
                      
                      {task.dependencies.length > 0 && (
                        <div className="mb-3">
                          <span className="text-xs font-medium text-gray-500">Dependencies:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {task.dependencies.map((dep, index) => (
                              <span key={index} className="inline-flex px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-700">
                                {dep}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(task.status)}`}>
                        {task.status.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="text-xs text-gray-500">
                      Vulnerability: {task.vulnerability_id}
                    </div>
                    <div className="flex space-x-2">
                      <button className="text-blue-600 hover:text-blue-800 text-sm">
                        Edit
                      </button>
                      <button className="text-green-600 hover:text-green-800 text-sm">
                        Complete
                      </button>
                      <button className="text-gray-600 hover:text-gray-800 text-sm">
                        View Details
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default VulnerabilityManagement